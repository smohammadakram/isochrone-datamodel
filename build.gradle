// Plugin declaration

buildscript {
	apply from: 'http://dbis-informatik.uibk.ac.at/static/ma/niko/gradle/checkstyle.gradle'
}

apply plugin: 'application'
apply plugin: 'checkstyle'
apply plugin: 'eclipse'
apply plugin: 'findbugs'
apply plugin: 'jacoco'
apply plugin: 'java'
apply plugin: 'jdepend'

// Basic settings

mainClassName = 'datamodel.Main'
sourceCompatibility=JavaVersion.VERSION_1_8
targetCompatibility=JavaVersion.VERSION_1_8

ext {
	versionFindbugs = '+'
	versionJacoco = '0.7.2+'
	versionPostgresql = '9.3+'
}

// Repositories, Configurations, Dependencies and SourceSets setup

repositories {
	mavenCentral()
	maven {
		url "http://nexus.onebusaway.org/content/repositories/snapshots"
	}
}

dependencies {
	compile "com.google.code.findbugs:annotations:$versionFindbugs"
	compile 'com.tngtech.java:config-builder:+'
	compile 'org.apache.logging.log4j:log4j-api:2.1'
	compile 'org.onebusaway:onebusaway-gtfs:+'
	compile 'org.onebusaway:onebusaway-vdv452-to-gtfs-converter:+'
	compile 'org.openstreetmap.osmosis:osmosis-pbf:+'
	compile ('org.postgis:postgis-jdbc:+') {
		exclude module: 'postgresql'
	}
	compile "org.postgresql:postgresql:$versionPostgresql"

	runtime 'org.apache.logging.log4j:log4j-core:2.1'
	runtime 'org.apache.logging.log4j:log4j-slf4j-impl:2.1'

	testCompile 'org.testng:testng:6+'
}

// Detailled settings (tasks, task configuration, ...)

checkstyle {
	ignoreFailures = true
	showViolations = false
}

findbugs {
	effort = 'max'
	ignoreFailures = true
	reportLevel = 'low'
	toolVersion = versionFindbugs
}

jacoco {
	toolVersion = versionJacoco
}

jar {
    manifest {
        attributes 'Main-Class': "$mainClassName"
    }
}

test {
	useTestNG {
		useDefaultListeners = true
	}

	ignoreFailures = true
}

// Custom tasks

task javadocJar(type: Jar, dependsOn: javadoc) {
	description = 'Builds a jar file including javadoc'
	from javadoc.destinationDir

	classifier 'javadoc'
}

task sourcesJar(type: Jar, dependsOn: classes) {
	description = 'Builds a jar file including sources'
	from sourceSets.main.allSource

	classifier 'sources'
}

task staticJar(type: Jar) {
	description = 'Builds a jar file including all libraries'
	from sourceSets.main.output
	from { configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) } }

	manifest {
        attributes 'Main-Class': "$mainClassName"
    }

	classifier = 'static'
}

// CI tasks

task jarAll(dependsOn: [jar, javadocJar, sourcesJar, staticJar])
